using System.IO;

using UnityEditor;
namespace UnitySupport.Editor;
static class CreateIsExternalInit
{
    const string filename = "IsExternalInit.cs";

    static readonly string fileContent =
@"// Auto-generated by Modern CS Bridge for Unity
// Provides the polyfill required for C# record / init syntax.
#if !NET8_0_OR_GREATER
// ReSharper disable once CheckNamespace
namespace System.Runtime.CompilerServices
{
    internal sealed class IsExternalInit { }
}
#endif
";

    [MenuItem("Assets/Create/Scripting/IsExternalInit", priority = 180)]
    static void CreateFromScripting() => WriteFile(SelectedFolder());
    [MenuItem("Assets/Create/Scripting/IsExternalInit", validate = true)]
    static bool ValidateScripting() => SelectedFolder() != null;
    [MenuItem("Assets/Create/Support Code/IsExternalInit", priority = 50)]
    static void GenerateFile() => WriteFile(SelectedFolder());
    [MenuItem("Assets/Create/Support Code/IsExternalInit", validate = true)]
    static bool ValidateFolder() => SelectedFolder() != null;
    static string SelectedFolder()
    {
        string path = AssetDatabase.GetAssetPath(Selection.activeObject) ?? "Assets";
        if (path.Length == 0) path = "Assets";
        if (Path.HasExtension(path)) path = Path.GetDirectoryName(path);
        return path;
    }

    static void WriteFile(string folder)
    {
        string path = Path.Combine(folder, filename);
        bool replace = File.Exists(path);

        File.WriteAllText(path, fileContent);   // create or overwrite
        AssetDatabase.Refresh();

        EditorUtility.DisplayDialog(
            "Modern CS Bridge for Unity",
            replace
                ? $"Replaced ‘{filename}’ in ‘{folder}’."
                : $"Created ‘{filename}’ in ‘{folder}’.",
            "Close");
    }
}
